"""
Django settings for pong project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import datetime
import urllib.parse
import logging
import time
from pathlib import Path

from dotenv import load_dotenv  # pylint: disable=unused-import


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

APPEND_SLASH = True


# Application definition

INSTALLED_APPS = [
    "accounts.apps.AccountsConfig",
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "django_filters",
    "authentication",
    "game",
    "socketcontrol",
    "livegame",
    "friends",
]

MIDDLEWARE = [
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


ROOT_URLCONF = "pong.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pong.wsgi.application"
ASGI_APPLICATION = "pong.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_NAME"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Use our custom User class for authorization
# in app "accounts", file "models.py"

AUTH_USER_MODEL = "accounts.User"

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 6,
    "PAGE_SIZE_QUERY_PARAM": "page_size",
    "EXCEPTION_HANDLER": "pong.utils.custom_exception_handler",
}

cors_origins_raw = os.getenv("CORS_ALLOWED_ORIGINS", "")
cors_origins_list = cors_origins_raw.split(",")

csrf_trusted_raw = os.getenv("CSRF_TRUSTED_ORIGINS", "")
csrf_trusted_list = csrf_trusted_raw.split(",")

MAIN_URL = os.environ.get("MAIN_URL")

parsed_url = urllib.parse.urlparse(os.environ.get("MAIN_URL"))
current_ip = parsed_url.hostname

# en0 인터페이스의 IP 주소를 가져옵니다.
cors_origins_list.append(MAIN_URL)
csrf_trusted_list.append(MAIN_URL)

ALLOWED_HOSTS = ["*"]
CORS_ALLOWED_ORIGINS = cors_origins_list
CSRF_TRUSTED_ORIGINS = csrf_trusted_list
CORS_ALLOW_CREDENTIALS = True

CLIENT_ID = os.environ.get("CLIENT_ID")
CLIENT_SECRET = os.environ.get("CLIENT_SECRET")
TOKEN_URL = os.environ.get("42TOKEN_URL")
OAUTH_URL = os.environ.get("42OAUTH_URL")
CALLBACK_URL = f"{MAIN_URL}/login/callback"
AVATAR_LOCATION = os.environ.get("AVATAR_LOCATION")


class EpochFormatter(logging.Formatter):
    """Custom formatter to add epoch time to log records."""

    def format(self, record):
        # Add the current epoch time to the record
        record.epoch = time.time()
        # Call the original formatter to use the modified record
        return super().format(record)


DIR_LOG = os.path.join(BASE_DIR.parent, "logs")
os.system(f"mkdir -p {DIR_LOG}")

LOGLEVEL_ROOT = os.environ.get("LOGLEVEL_ROOT", "WARNING")
LOGLEVEL_DJANGO = os.environ.get("LOGLEVEL_DJANGO", "WARNING")
LOGLEVEL_SOCKETIO = os.environ.get("LOGLEVEL_SOCKETIO", "WARNING")
LOGLEVEL_PONG = os.environ.get("LOGLEVEL_PONG", "WARNING")
LOGLEVEL_LIVEGAME = os.environ.get("LOGLEVEL_LIVEGAME", "WARNING")
LOGLEVEL_TRACE_ENABLE = os.environ.get("LOGLEVEL_TRACE_ENABLE", "0")


log_suffix = datetime.datetime.now().strftime("%Y-%m-%d")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "basic": {
            "format": "[%(levelname)s][%(asctime)s] %(name)s: %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "precise": {
            "()": EpochFormatter,
            "format": "[%(levelname)s][%(epoch)f] %(name)s: %(message)s",
            "datefmt": "%H:%M:%S",
        },
    },
    "handlers": {
        "file": {
            "level": LOGLEVEL_ROOT,
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(
                DIR_LOG,
                f"log_{log_suffix}.log",
            ),
            "encoding": "UTF-8",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 10,
            "formatter": "basic",
        },
        "consoleBasic": {
            "level": LOGLEVEL_ROOT,
            "class": "logging.StreamHandler",
            "formatter": "basic",
        },
        "consolePrecise": {
            "level": LOGLEVEL_ROOT,
            "class": "logging.StreamHandler",
            "formatter": "precise",
        },
    },
    "root": {
        "handlers": ["consoleBasic"],
        "level": LOGLEVEL_ROOT,
    },
    "loggers": {
        "django": {
            "handlers": ["consoleBasic", "file"],
            "level": LOGLEVEL_DJANGO,
            "propagate": False,
        },
        "daphne": {
            "handlers": ["consoleBasic", "file"],
            "level": LOGLEVEL_DJANGO,
            "propagate": False,
        },
        "socketio": {
            "handlers": ["consoleBasic"],
            "level": LOGLEVEL_SOCKETIO,
            "propagate": False,
        },
        "livegame": {
            "handlers": ["consolePrecise"],
            "level": LOGLEVEL_LIVEGAME,
            "propagate": False,
        },
        "authenticate": {
            "handlers": ["consoleBasic"],
            "level": DEBUG,
            "propagate": False,
        },
    },
}

SIMPLE_JWT = {
    # 토큰 암호화에 사용할 알고리즘
    "ALGORITHM": "HS256",
    # 액세스 토큰의 유효 기간
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(days=1),
    # 리프레시 토큰의 유효 기간
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(days=2),
    # 회전(refresh) 시 새 리프레시 토큰의 유효 기간을 리셋할지 여부
    "ROTATE_REFRESH_TOKENS": False,
    # 리프레시 토큰이 만료될 때 새로운 토큰 발급을 거부할지 여부
    "BLACKLIST_AFTER_ROTATION": True,
    # 토큰에 포함될 사용자 정의 클레임
    "USER_ID_FIELD": "intra_id",
    # 사용자 정의 클레임의 필드 이름
    "USER_ID_CLAIM": "intra_id",
    "AUTH_COOKIE": "pp_access_token",
    "AUTH_COOKIE_REFRESH": "pp_refresh_token",
    # 사용자 모델의 필드를 통해 사용자를 인증할 때 사용할 필드
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    # 토큰 발급 시 사용할 시크릿 키
    "SIGNING_KEY": SECRET_KEY,
    # 검증 시 사용할 공개 키 (기본적으로 시크릿 키와 동일)
    "VERIFYING_KEY": "",
    # 토큰에 포함될 헤더
    "TOKEN_TYPE_CLAIM": "Type",
    # 토큰에 포함될 타입
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    # JTI (JWT ID) 클레임을 사용할지 여부
    "JTI_CLAIM": "jti",
}


EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND")
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
